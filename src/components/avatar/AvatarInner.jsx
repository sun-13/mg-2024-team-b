/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

import React, { useEffect, useRef } from 'react'
import { useAnimations, useFBX } from '@react-three/drei'
import { AnimationConst } from '@/AnimationConst'
import { useFrame } from "@react-three/fiber";
import * as THREE from 'three';

const isUsingViseme = true;

export function AvatarInner(props) {
  const {
    animation,
    nodes,
    materials,
    scene,
    audio,
    lipData,
    isSpeaking,
  } = {
    animation: 'Happy',
    ...props
  };

  // import animations
  const animations = AnimationConst.map((item) => {
    const { animations: a } = useFBX(item.file);
    a[0].name = item.name;
    return a[0];
  });

  const group = useRef();

  const { actions } = useAnimations(animations, group);

  // TODO: 一旦それっぽい感じにしてみたので要調整
  const morphTargetSmoothing = 0.5;
  const morphTargetScale = 1;
  const customCorresponding = {
    A: [{ target: "mouthSmile", value: 0.12}, {target: "mouthOpen", value: 0.26}], // viseme_PP
    B: [{ target: "mouthSmile", value: 0.12}, {target: "mouthOpen", value: 0.26}], //   B: "viseme_kk",
    C: [{ target: "mouthSmile", value: 0.4}, {target: "mouthOpen", value: 0.32}], // viseme_I
    D: [{ target: "mouthSmile", value: 0.66}, {target: "mouthOpen", value: 0.33}], // viseme_AA
    E: [{ target: "mouthSmile", value: 0.25}, {target: "mouthOpen", value: 0.9}], // viseme_O
    F: [{ target: "mouthSmile", value: 0.12}, {target: "mouthOpen", value: 0.26}], // viseme_U
    G: [{ target: "mouthSmile", value: 0.12}, {target: "mouthOpen", value: 0.26}], // viseme_FF
    H: [{ target: "mouthSmile", value: 0.4}, {target: "mouthOpen", value: 0.65}], // viseme_TH
    X: [{ target: "mouthSmile", value: 0.12}, {target: "mouthOpen", value: 0.26}], // viseme_PP
  };
  const visemeCorresponding = {
    A: "viseme_PP",
    B: "viseme_kk",
    C: "viseme_I",
    D: "viseme_AA",
    E: "viseme_O",
    F: "viseme_U",
    G: "viseme_FF",
    H: "viseme_TH",
    X: "viseme_PP",
  };

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation, actions]);

  useFrame(() => {
    if (isUsingViseme) {
      handleFrameViseme();
    } else {
      handleFrameCustom();
    }
  });

  // Custom
  const handleFrameCustom = () => {
    initializeMorphTargets();

    if (!audio || !lipData || !isSpeaking) {
      return;
    }
    const currentTime = audio.currentTime;
    for (const mouthCue of lipData.mouthCues) {
      if (currentTime >= mouthCue.start && currentTime <= mouthCue.end) {
        for (const item of customCorresponding[mouthCue.value]) {
          nodes.Wolf3D_Head.morphTargetInfluences[
            nodes.Wolf3D_Head.morphTargetDictionary[
              item.target
            ]
          ] =  THREE.MathUtils.lerp(
            nodes.Wolf3D_Head.morphTargetInfluences[
              nodes.Wolf3D_Head.morphTargetDictionary[
                item.target
              ]
            ],
            item.value * morphTargetScale,
            morphTargetSmoothing
          );

          nodes.Wolf3D_Teeth.morphTargetInfluences[
            nodes.Wolf3D_Teeth.morphTargetDictionary[
              item.target
            ]
          ] =  THREE.MathUtils.lerp(
            nodes.Wolf3D_Teeth.morphTargetInfluences[
              nodes.Wolf3D_Teeth.morphTargetDictionary[
                item.target
              ]
            ],
            item.value * morphTargetScale,
            morphTargetSmoothing
          );
        }
        break;
      }
    }
  };

  const initializeMorphTargets = () => {
    for (const value of ["mouthSmile", "mouthOpen"]) {
      nodes.Wolf3D_Head.morphTargetInfluences[
        nodes.Wolf3D_Head.morphTargetDictionary[value]
      ] = THREE.MathUtils.lerp(
        nodes.Wolf3D_Head.morphTargetInfluences[
          nodes.Wolf3D_Head.morphTargetDictionary[value]
        ],
        0,
        morphTargetSmoothing
      );

      nodes.Wolf3D_Teeth.morphTargetInfluences[
        nodes.Wolf3D_Teeth.morphTargetDictionary[value]
      ] = THREE.MathUtils.lerp(
        nodes.Wolf3D_Teeth.morphTargetInfluences[
          nodes.Wolf3D_Teeth.morphTargetDictionary[value]
        ],
        0,
        morphTargetSmoothing
      );
    }
  };

  // Viseme
  const handleFrameViseme = () => {
    initializeVisemeMorphTargets();
    if (!audio || !lipData || !isSpeaking) {
      return;
    }

    const currentTime = audio.currentTime;
    for (const mouthCue of lipData.mouthCues) {
      if (currentTime >= mouthCue.start && currentTime <= mouthCue.end) {
        nodes.Wolf3D_Head.morphTargetInfluences[
          nodes.Wolf3D_Head.morphTargetDictionary[
            visemeCorresponding[mouthCue.value]
          ]
        ] = THREE.MathUtils.lerp(
          nodes.Wolf3D_Head.morphTargetInfluences[
            nodes.Wolf3D_Head.morphTargetDictionary[
              visemeCorresponding[mouthCue.value]
            ]
          ],
          morphTargetScale,
          morphTargetSmoothing
        );
        nodes.Wolf3D_Teeth.morphTargetInfluences[
          nodes.Wolf3D_Teeth.morphTargetDictionary[
            visemeCorresponding[mouthCue.value]
          ]
        ] = THREE.MathUtils.lerp(
          nodes.Wolf3D_Teeth.morphTargetInfluences[
            nodes.Wolf3D_Teeth.morphTargetDictionary[
              visemeCorresponding[mouthCue.value]
            ]
          ],
          morphTargetScale,
          morphTargetSmoothing
        );
        break;
      }
    }
  };

  const initializeVisemeMorphTargets = () => {
    for (const value of Object.values(visemeCorresponding)) {
      nodes.Wolf3D_Head.morphTargetInfluences[
        nodes.Wolf3D_Head.morphTargetDictionary[value]
      ] = THREE.MathUtils.lerp(
        nodes.Wolf3D_Head.morphTargetInfluences[
          nodes.Wolf3D_Head.morphTargetDictionary[value]
        ],
        0,
        morphTargetSmoothing
      );

      nodes.Wolf3D_Teeth.morphTargetInfluences[
        nodes.Wolf3D_Teeth.morphTargetDictionary[value]
      ] = THREE.MathUtils.lerp(
        nodes.Wolf3D_Teeth.morphTargetInfluences[
          nodes.Wolf3D_Teeth.morphTargetDictionary[value]
        ],
        0,
        morphTargetSmoothing
      );
    }
  };



  return (
    <group {...props} scale={2} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Hair"
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      { nodes.Wolf3D_Glasses && (
        <skinnedMesh
          name="Wolf3D_Glasses"
          geometry={nodes.Wolf3D_Glasses.geometry}
          material={materials.Wolf3D_Glasses}
          skeleton={nodes.Wolf3D_Glasses.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Glasses.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Glasses.morphTargetInfluences}
        />)
      }
    </group>
  );
}
